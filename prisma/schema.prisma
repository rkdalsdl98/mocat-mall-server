// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  username String @default("김아무개")
  salt String
  address String
  orders order[] @relation("Orders")
  coupons String[]
  qaboards Json[]
  baskets Json[] // 상품의 아이디와 간단한 정보를 담은 객체를 Json 형태로 저장
  createdAt DateTime @default(now())
  authority authority? @relation("Authority")
}

model coupon {
  salePrice Int @default(0)
  validAt DateTime @default(now())
  couponNumber String @unique
}

model qaboard {
  id Int @id @default(autoincrement())
  title String @default("배송관련 문의")
  answerState String @default("대기중")
  writerEmail String
  writerName String
  assignProduct qaboardonproduct[]
  reply reply[] @relation("Replys")
  contentText String
  createdAt DateTime @default(now())
}

model qaboardonproduct {
  qabard qaboard @relation(fields: [qaId], references: [id], onDelete: Cascade)
  qaId Int
  product product @relation(fields: [productId], references: [id])
  productId Int
  assignAt DateTime @default(now())
  @@id([qaId, productId])
}

model reply {
  id Int @id @default(autoincrement())
  contentText String
  writerEmail String
  writerName String
  qaboard qaboard @relation("Replys", fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int
  createdAt DateTime @default(now())
}

model product {
  id Int @id @default(autoincrement())
  productName String
  price Int @default(0)
  thumbnail String @default("https://firebasestorage.googleapis.com/v0/b/mocatmall.appspot.com/o/exception%2Fnotfound.PNG?alt=media&token=1af683ff-9a2b-4ca2-aea4-98c742c22235")
  productDetail productdetail? @relation("Detail")
  assignQABoard qaboardonproduct[]
}

model productdetail {
  id Int @id @default(autoincrement())
  product product @relation("Detail", fields: [productId], references: [id], onDelete: Cascade)
  productId Int @unique
  colors String[]
  sizes String[]
  images String[]
  description String
}

model order {
  orderId String @unique
  paymentKey String
  delivery delivery? @relation("Delivery")
  user user? @relation("Orders", fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model delivery {
  id Int @id @default(autoincrement())
  order order @relation("Delivery", fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId String @unique
  address String
  detailAddress String
  memo String
  state String
  productId Int[]
}

model authority {
  uuid String @unique
  salt String
  code String
  type String // 권한 타입 "employee" | "leader" | "chief" 없다면 "none"으로 표기 해서 리턴
  createdAt DateTime @default(now())
  user user? @relation("Authority", fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String @unique
}